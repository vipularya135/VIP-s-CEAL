import torch
from torch.utils.data import DataLoader, Subset
from torchvision import datasets, transforms
import torch.nn as nn
import torch.nn.functional as F
import random
import numpy as np

seed = 4000
random.seed(seed)
np.random.seed(seed)
torch.manual_seed(seed)

transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])
#series of data transformations is defined using PyTorch's transforms.Compose.
# It converts images to tensors and normalizes the pixel values.

train_set = datasets.MNIST(
    root='./data',
    train=True,
    download=True,
    transform=transform
)

test_set = datasets.MNIST(
    root='./data',
    train=False,
    download=True,
    transform=transform
)

class LeNet5(nn.Module):
    def __init__(self):
        super(LeNet5, self).__init__()
        self.conv1 = nn.Conv2d(1, 6, kernel_size=5)
        self.conv2 = nn.Conv2d(6, 16, kernel_size=5)
        self.fc1 = nn.Linear(16 * 4 * 4, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.max_pool2d(x, 2)
        x = F.relu(self.conv2(x))
        x = F.max_pool2d(x, 2)
        x = x.view(-1, 16 * 4 * 4)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x


def train_model(model, train_dataset, epochs, learning_rate):
    # DataLoader for training set
    train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)
    criterion = nn.CrossEntropyLoss()
    optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)

    for epoch in range(epochs):
        running_loss = 0.0
        for i, (inputs, labels) in enumerate(train_loader, 0):
            # Zero the parameter gradients
            optimizer.zero_grad()

            # Forward + backward + optimize
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            # Accumulate loss
            running_loss += loss.item()

        print(f"Epoch [{epoch+1}/{epochs}] Loss: {running_loss / len(train_loader):.3f}")

    print("Finished training")


def test_model(model, test_set):
    # DataLoader for test set
    test_loader = DataLoader(test_set, batch_size=64)
    model.eval()
    correct = 0
    total = 0

    with torch.no_grad():
        for inputs, labels in test_loader:
            outputs = model(inputs)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    accuracy = 100 * correct / total
    return accuracy


def least_confidence_images(model, test_dataset, k=5000):
    test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)
    confidences = []
    indices = []

    with torch.no_grad():
        for images, targets in test_loader:
            outputs = model(images)
            probs = torch.softmax(outputs, dim=1)
            max_probs, _ = torch.max(probs, dim=1)
            confidences.extend(max_probs.tolist())
            indices.extend(targets.tolist())

    confidences = torch.tensor(confidences)
    _, selected_indices = torch.topk(confidences, k, largest=False)
    return Subset(test_dataset, selected_indices), [indices[i] for i in selected_indices]

def ceal_algorithm(initial_train_set, remaining_set, val_set, budget, target_accuracy, batch_size, degradation_threshold=0.05):
    # Initialize the labeled set with the initial subset
    labeled_set = initial_train_set

    # Initialize the cost counter
    cost = 0

    # Initialize the iteration counter
    iteration = 0

    # Initialize the model
    model = LeNet5()

    while cost < budget and test_model(model, val_set) < target_accuracy:
        iteration += 1
        print(f"Iteration: {iteration}")

        # Train the model on the labeled set
        train_model(model, labeled_set, epochs=5, learning_rate=0.01)

        # Select the least confident instances
        least_conf_images, least_conf_labels = least_confidence_images(model, remaining_set, k=batch_size)

        # Combine the least confident instances with the labeled set
        labeled_set = torch.utils.data.ConcatDataset([labeled_set, least_conf_images])

        # Remove the least confident instances from the remaining set
        remaining_set = Subset(remaining_set, list(set(range(len(remaining_set))) - set(least_conf_labels)))

        # Update the cost
        cost += batch_size

        # Degrade the budget threshold
        budget *= (1 - degradation_threshold)

    print("CEAL algorithm finished.")
    print(f"Total cost: {cost}")
    print(f"Final accuracy on validation set: {test_model(model, val_set)}")

initial_train_set = Subset(train_set, random.sample(range(len(train_set)), k=500))
remaining_set = Subset(train_set, list(set(range(len(train_set))) - set(initial_train_set.indices)))
val_set = test_set

ceal_algorithm(initial_train_set, remaining_set, val_set, budget=1000, target_accuracy=95, batch_size=100)

